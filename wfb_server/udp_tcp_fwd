#!/usr/bin/python3
import socket
import click
import signal
import atexit
import sys

@click.command()
@click.option('--mpkts', default=4096, help='udp max pkt size def: 2048')
@click.option('--ip_rx', default='0.0.0.0', help='ip of sorce stream def: 0.0.0.0')
@click.option('--port_rx', default=5700, help='port of source stream def: 5700')
@click.option('--ip_tx', default='127.0.0.1', help='ip of destination host def: 127.0.0.1')
@click.option('--port_tx', default=5800, help='first port of destination hosts def: 5680')

def main(mpkts,ip_rx,port_rx,ip_tx,port_tx):
    
    print("UDP to TCP fwd")
    print(f"ip_rx: {ip_rx} port_rx: {port_rx}")
    print(f"ip_tx: {ip_tx} port_tx: {port_tx}")

    udp_socket = None
    tcp_socket = None

    def cleanup():
        for s in (udp_socket, tcp_socket):
            try:
                if s is not None:
                    s.close()
            except Exception as e:
                print(e)

    def signal_handler(sig, frame):
        cleanup()
        sys.exit(0)

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        if hasattr(socket, 'SO_REUSEPORT'):
            udp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    except Exception:
        pass
    udp_socket.bind((ip_rx, port_rx))
        
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print(f"\ntrying to connect {ip_tx}:{port_tx}...\n")

    try:
        while True:
            try:
                tcp_socket.connect((ip_tx, port_tx))
                break
            except OSError:
                continue

        laddr = tcp_socket.getsockname()
        raddr = tcp_socket.getpeername()   
        print(f"connection established successful...\nladdr:{laddr} raddr:{raddr}")

        while True:
            try:
                data, addr = udp_socket.recvfrom(mpkts)
            except OSError:
                break
            try:
                tcp_socket.sendall(data)
            except OSError:
                break
    finally:
        cleanup()


if __name__ == '__main__':
    main()
