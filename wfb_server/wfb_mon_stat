#!/usr/bin/python3

import re
import time
import socket
import signal
import sys

from multiprocessing import Process

import click

@click.command()
@click.option('--ip', default="127.0.0.1", help='address of wfb_mon server/default 127.0.0.1')
@click.option('--port', default=14550, help='port of wfb server/default 14550')
@click.option('--chname', default="rx_video", help='stat channel name/default rx_video')
@click.option('--shpkt', default="true", help='show pkt stat/default true')
@click.option('--shrssi', default="true", help='show rssi stat/default true')
@click.option('--mp_ip', default="127.0.0.1", help='mavlink proxy ip adress')
@click.option('--mp_port', default=14560, help='mavlink proxy port')

def main (ip,port,chname,shpkt,shrssi,mp_ip,mp_port):

    global exit_flag
    exit_flag = False

    def signal_handler(sig, frame):
        global exit_flag
        exit_flag = True
        sys.exit(0)

    def heartbit(msg,hb_sock,hb_ip,hb_port):
        global exit_flag
        hb_sock.sendto(msg.encode("utf-8"),(hb_ip, hb_port))
        timestamp = time.time()
        while not exit_flag:
            if (time.time()-timestamp) >= 1 :
                hb_sock.sendto(msg.encode("utf-8"),(hb_ip, hb_port))
                timestamp = time.time()

    def wifi_ch_freq(channel):
        if 1 <= channel <= 13:
            # for channels from 1 to 13 @ 2,4 GHz
            frequency = 2407 + (channel - 1) * 5
            return frequency
        elif 36 <= channel <= 181:
            # for channels from 36 to 165 @ 5170-5835 MHz
            frequency = 5170 + (channel - 36) * 5
            return frequency
        else:
            return None


    def uprx_print_status(d_uprx_pkt_num, d_uprx_pkts, d_uprx_pkts_lost, d_uprx_qlt,d_uprx_pkt, d_uprx_pkt_lost):

        print(f"pkt/s: {d_uprx_pkts:}{d_uprx_pkt} pkt_loss: {d_uprx_pkts_lost:}{d_uprx_pkt_lost} qlt: {d_uprx_qlt}")

        return

    def rx_print_status(d_pkt, d_fec_r, d_pkts, d_pkt_lost, d_d_err, d_fec_r_s, d_pkt_lost_s, d_d_err_s, d_ant_data, d_channel,d_bandwidth,d_wlans_info):

        rssi_avg_max = -120
        pkts_max = 0
        for ant in ant_data:
            #d_rssi_min = ant["rssi_min"]
            d_rssi_avg = ant["rssi_avg"]
            #d_rssi_max = ant["rssi_max"]
            #d_ant_num = ant["ant_num"]
            d_ant_pkts = ant["pkts"]

            if (d_rssi_avg > rssi_avg_max) and (d_ant_pkts > 0):
                rssi_avg_max =  d_rssi_avg
            if d_ant_pkts > pkts_max:
                pkts_max = d_ant_pkts

            rssi_mlvl = 106 - abs(d_rssi_avg-16)
            d_total = 106

        if pkts_max > 0:
            quality = int(100 - (100*d_pkt_lost_s)/(pkts_max+d_pkt_lost_s))
        else:
            quality = 0



        print(f"channel: {d_channel} ({wifi_ch_freq(int(d_channel))} MHz) band_w: {d_bandwidth} pkt/s: {pkts_max} RSSI: {rssi_avg_max} dBm quality: {quality}")


        return



    UDP_IP = ip
    UDP_PORT = port

    signal.signal(signal.SIGINT, signal_handler)

    msg_connect = 'wfb_mon:connect'

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    ext = False
    while not ext:
        try:
            sock.bind((UDP_IP, UDP_PORT))
            ext = True
        except:
            UDP_PORT +=1

    msg_connect+=f':{UDP_IP}:{UDP_PORT}'
    if not ((UDP_IP == ip) and (UDP_PORT == port)):
        thread_heartbit = Process(target=heartbit, args=(msg_connect,sock,ip,port))
        thread_heartbit.start()


    ant_data = []
    pkt = 0
    fec_r = 0
    pkt_lost = 0
    d_err = 0
    wlan_number = 4
    pkts_1 = 0
    zero = 0
    pkts = 0
    fec_r_s = 0
    pkt_lost_s =0
    d_err_s = 0
    channel = 36
    bandwidth = 20
    wlan_number = 4
    wlans_info = f"{wlan_number}:wlan0:wlan1:wlan2:wlan3".split(":")

    uprx_pkt=0
    uprx_pkt_lost = 0


    for i in range(wlan_number):
        ant_data.append({"ant_num": i*100,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})
        ant_data.append({"ant_num": i*100+1,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})


    print("\n")
    print("WFB-MON-STAT")
    print("")
    #---------------------------------------------------------------------------------------------------

    while not exit_flag:

        data, addr = sock.recvfrom(2048)
        line = data.decode("utf-8")
        parts = re.split(r"\s+", line)
        if parts[0] == chname:
            if parts[0][:2] == 'rx':
                if parts[2] == "ANT":
                    #print(line.split())
                    ant_num = int(parts[3])
                    pkts, rssi_min, rssi_avg, rssi_max = map(int, parts[4].split(":"))
                    for i in range(wlan_number*2):
                        if ant_num == ant_data[i]["ant_num"]:
                            ant_data[i]["pkts"] = pkts
                            ant_data[i]["rssi_min"] = rssi_min
                            ant_data[i]["rssi_avg"] = rssi_avg
                            ant_data[i]["rssi_max"] = rssi_max
                elif parts[2] == "PKT":
                    #print(line.split())
                    pkts_1, zero, pkts, fec_r_s, pkt_lost_s, d_err_s = map(int, parts[3].split(":"))
                    pkt+= pkts
                    fec_r+= fec_r_s
                    pkt_lost+= pkt_lost_s
                    d_err+= d_err_s
                    rx_print_status(pkt, fec_r, pkts, pkt_lost, d_err, fec_r_s, pkt_lost_s, d_err_s,ant_data,channel,bandwidth,wlans_info)
                    ant_data = []
                    for i in range(wlan_number):
                        ant_data.append({"ant_num": i*100,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})
                        ant_data.append({"ant_num": i*100+1,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})
                elif parts[1] == "INF":
                    channel = parts[2]
                    bandwidth = parts[3]
                    wlans_info = parts[4].split(":")
                    wlan_number = int(wlans_info[0])
            elif parts[0][:12] == "udp_proxy_rx":
                print(line.split())
                uprx_pkt_num, uprx_pkts, uprx_pkts_lost, uprx_qlt = map(int, parts[2].split(":"))
                uprx_pkt += uprx_pkts
                uprx_pkt_lost += uprx_pkts_lost
                uprx_print_status(uprx_pkt_num, uprx_pkts, uprx_pkts_lost, uprx_qlt,uprx_pkt, uprx_pkt_lost)
                pass

            elif parts[0] == "[err]":
                print("err: "+line)

if __name__ == '__main__':
    main()
