#!/usr/bin/python3
import socket
import serial
import click
import signal
import atexit
import sys

# --- stat info
#import time

@click.command()
@click.option('--port_r', default=14785, help='mav_router_tx port')
@click.option('--ip_r', default='0.0.0.0', help='mav_router_tx ip')
@click.option('--mode', default=0, help='mode 0 (default) mirrow, mode 1 strip')

def main(port_r,ip_r,mode):

    UDP_IP_ROUTER = ip_r
    UDP_PORT_ROUTER = port_r

    UART_PORT_1 = '/dev/ttyS0'  
    UART_BAUDRATE_1 = 115200  

    UART_PORT_2 = '/dev/ttyS4'  
    UART_BAUDRATE_2 = 115200  

    # --- stat info
    #time_int = 1

    print ("mav_router_tx initialization...\n")

    ser_1 = None
    ser_2 = None
    sock_proxy = None

    def cleanup():
        try:
            if sock_proxy is not None:
                sock_proxy.close()
        except Exception as e:
            print(e)
        for ser in (ser_1, ser_2):
            try:
                if ser is not None and ser.is_open:
                    ser.close()
            except Exception as e:
                print(e)

    def signal_handler(sig, frame):
        cleanup()
        sys.exit(0)

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        ser_1 = serial.Serial(UART_PORT_1, UART_BAUDRATE_1)
        ser_2 = serial.Serial(UART_PORT_2, UART_BAUDRATE_2)
        print ("serial ports... ok")
        sock_proxy = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            sock_proxy.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            if hasattr(socket, 'SO_REUSEPORT'):
                sock_proxy.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        except Exception:
            pass
        sock_proxy.bind((UDP_IP_ROUTER, UDP_PORT_ROUTER))
        print ("socket... ok\n")
        print (f'UDP_IP_ROUTER: {UDP_IP_ROUTER}')
        print (f'UDP_PORT_ROUTER: {UDP_PORT_ROUTER}\n')
        print ("mav_router_tx loop starting...\n")
        ser_num = 1
        while True:
            try:
                data, addr = sock_proxy.recvfrom(2048)
            except OSError:
                break
            if mode == 0:
                ser_1.write(data)
                ser_2.write(data)
            elif mode == 1:
                if ser_num == 1:
                    ser_1.write(data)
                    ser_num = 2
                elif ser_num == 2:
                    ser_2.write(data)
                    ser_num = 1
        
        # --- stat info
        #    pkt_gs +=1

        # --- stat info 
        #    if (time.time() - time_ls) >= time_int:
        #        print(f"gs: {pkt_gs} pkt/s")
        #        pkt_gs = 0
        #        time_ls = time.time()
                
    except Exception as e:
        print(f"error: {e}")
    finally:
        cleanup()

if __name__ == '__main__':
    main()
