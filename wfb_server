#!/usr/bin/python3

import subprocess
import click
import configparser
import select
import socket
import os
import sys
import logging

@click.command()
@click.option('--conf', default="wfb_server.cfg", help='path to config file')

def main(conf):
    
    
    wfb_server_dir = os.path.dirname(os.path.abspath(__file__))+"/"
    conf = wfb_server_dir+conf
    config = configparser.ConfigParser()
    config.read(conf)
    sections = config.sections()
    
    logging.basicConfig(
    level=logging.INFO,
    format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename = wfb_server_dir+'wfb_server.log',
    filemode = 'a')  # Режим записи в файл (append)
    
    logging.info("starting wfb-server...")
    
    process_list = []
    process_id={}
    
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:    
        wfb_mon_ip = config['wfb_server']['wfb_mon_ip']
        wfb_mon_port = int(config['wfb_server']['wfb_mon_port'])
        wfb_server_ip = config['wfb_server']['wfb_server_ip']
        wfb_server_port = int(config['wfb_server']['wfb_server_port'])
    except:
        wfb_mon_ip = '127.0.0.1'
        wfb_mon_port = 14550
        wfb_server_ip = '0.0.0.0'
        wfb_server_port = 14550

    for section in sections:
        
        if section[:4]=='wlan':
    
            wlans = config[section]['wlan'].split()
            channel = config[section]['channel']
            bandwidth = config[section]['bandwidth']
            bw_pf = config[section]['bw_pf']

            for wlan in wlans:
                subprocess.run(f"ifconfig {wlan} down",shell=True, check=True)

                subprocess.run(f"iw dev {wlan} set monitor otherbss",shell=True, check=True)

                subprocess.run(f"iw reg set US",shell=True, check=True)

                subprocess.run(f"ifconfig {wlan} up",shell=True, check=True)
                
                subprocess.run(f"iw dev {wlan} set channel {channel} HT{bandwidth}{bw_pf}",shell=True, check=True)
        
        elif section[:2]=='tx':
            options=config[section]
            wfb_xx=["/usr/bin/wfb_tx","-p",options['radio_port'],"-u",options['udp_port'],"-K",options['tx_key'],"-B",options['bandwidth'],"-G",options['G_guard_interval'],"-S",
                    options['S_stbc'],"-L",options['L_ldpc'],"-M",options['M_mcs_index'],"-k",options['k_RS_K'],"-n",options['n_RS_N'],"-T",options['T_poll_timeout'],
                    "-i",options['i_link_id']] + wlans
            process=subprocess.Popen(wfb_xx, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
            process_list.append(process)
            process_id[process.pid] = section
            
        elif section[:2]=='rx':
            options=config[section]
            wfb_xx=["/usr/bin/wfb_rx","-p",options['radio_port'],"-c",options['ip'],"-u",options['udp_port'],"-K",options['rx_key'],"-i",options['i_link_id']]+ wlans
            process=subprocess.Popen(wfb_xx, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
            process_list.append(process)
            process_id[process.pid] = section
            
        elif section[:6]=='udp_tx':
            options=config[section]
            udp_xx=[wfb_server_dir+"udp_tx","--ip",options['udp_tx_ip'],"--port",options['udp_tx_port'],"--pksize",options['udp_tx_pksize'],"--pks",options['udp_tx_pks'],"--lid",options['udp_tx_lid']]
            process=subprocess.Popen(udp_xx, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
            process_list.append(process)
            process_id[process.pid] = section
            
        elif section[:12]=='udp_proxy_tx':
            options=config[section]
            udp_xx=[wfb_server_dir+"udp_proxy_tx"]
            process=subprocess.Popen(udp_xx, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
            process_list.append(process)
            process_id[process.pid] = section
            
        elif section[:12]=='udp_proxy_rx':
            options=config[section]
            udp_xx=[wfb_server_dir+"udp_proxy_rx"]
            process=subprocess.Popen(udp_xx, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
            process_list.append(process)
            process_id[process.pid] = section
            
        elif section[:11]=='rz_mavproxy':
            options=config[section]
            udp_xx=[wfb_server_dir+"rz_mavproxy"]
            process=subprocess.Popen(udp_xx, stdout=subprocess.PIPE, bufsize=1, universal_newlines=True)
            process_list.append(process)
            process_id[process.pid] = section
            
    ext=False

    fd_list = [process.stdout.fileno() for process in process_list]
    logging.info("wfb-server started")

    while ext is False:
        readable, _, _ = select.select(fd_list, [], [])
        for fd in readable:
            for process in process_list:
                return_code = process.poll()
                if return_code is not None:
                    # Процесс завершился
                    if return_code != 0:
                        # Процесс завершился с ошибкой, выполните действия по обработке ошибки, например, вызов функции reinit()
                        print(f"[{process_id[process.pid]}] error! return code: {return_code}")
                        logging.error(f"[{process_id[process.pid]}] error! return code: {return_code}")
                        sys.exit(return_code)
                if process.stdout.fileno() == fd:
                    output = process.stdout.readline()
                    if output:
                        print(f"[{process_id[process.pid]}]", output.strip())
                        output = process_id[process.pid] + ' '+ output
                        sock.sendto(output.encode("utf-8"), (wfb_mon_ip, wfb_mon_port))



if __name__ == '__main__':
    main()
