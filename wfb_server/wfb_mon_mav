#!/usr/bin/python3
import re
import time
import socket
import signal
import atexit
import sys
import click
from multiprocessing import Process
import pymavlink.dialects.v20.ardupilotmega as mavlink2_0

@click.command()
@click.option('--ip', default="127.0.0.1", help='address of wfb_mon server def 127.0.0.1')
@click.option('--port', default=14550, help='port of wfb server def 14550')
@click.option('--ip_tx', default="127.0.0.1", help='ip for tx (from which mav command will be send) def 127.0.0.1')
@click.option('--port_tx', default=14814, help='port for tx (from which mav command will be send) def 14814')
@click.option('--chname', default="rx_video", help='stat channel name def rx_video')
@click.option('--mp_ip', default="127.0.0.1", help='mavlink proxy ip adress def 127.0.0.1')
@click.option('--mp_port', default=14500, help='mavlink proxy port def 14500')
@click.option('--id_tgs', default=255, help='target system id def 255')
@click.option('--id_tgc', default=100, help='target component id def 100')
@click.option('--id_cmd', default=1258, help='command id def 1258')
@click.option('--id_srcs', default=255, help='source system id def 255')
@click.option('--id_srcc', default=75, help='source component id def 75')

def main (ip,port,ip_tx,port_tx,chname,mp_ip,mp_port,id_tgs,id_tgc,id_cmd,id_srcs,id_srcc):

    thread_heartbit = None
    sock = None
    sock_tx = None
    
    def cleanup():
        try:
            if thread_heartbit != None:
                thread_heartbit.terminate()
                thread_heartbit.join(timeout=0.01)
                if thread_heartbit.is_alive():
                    thread_heartbit.kill()
                    thread_heartbit.join()
            if sock != None:
                sock.close()
            if sock_tx != None:
                sock_tx.close()
            
        except Exception as e:
            print(f"{e}")

    def signal_handler(sig, frame):
        cleanup()
        print(f"{sig}: process terminated...")
        sys.exit(0)
    
    atexit.register(cleanup)
    signal.signal(signal.SIGINT, signal_handler)    
    signal.signal(signal.SIGTERM, signal_handler)


    def heartbit(msg,hb_sock,hb_ip,hb_port):
        hb_sock.sendto(msg.encode("utf-8"),(hb_ip, hb_port))
        while True:
            hb_sock.sendto(msg.encode("utf-8"),(hb_ip, hb_port))
            time.sleep(1)

    def wifi_ch_freq(channel):
        if 1 <= channel <= 13:
            # for channels from 1 to 13 @ 2,4 GHz
            frequency = 2407 + (channel - 1) * 5
            return frequency
        elif 15 <= channel:
            # for channels from 36 to 165 @ 5170-5835 MHz
            frequency = 5000 + (channel) * 5
            return frequency
        else:
            return None

    def get_cmd_ln(d_mav,rssi,qlt,pkts,ch,freq):

        command_ln = d_mav.command_long_encode(
                target_system=id_tgs,
                target_component=id_tgc,
                command=id_cmd,
                confirmation=0,
                param1=rssi,
                param2=qlt,
                param3=pkts,
                param4=ch,
                param5=freq,
                param6=0,
                param7=0
            )
        return command_ln

    def uprx_print_status(d_uprx_pkt_num, d_uprx_pkts, d_uprx_pkts_lost, d_uprx_qlt,d_uprx_pkt, d_uprx_pkt_lost):

        print(f"pkt/s: {d_uprx_pkts:}{d_uprx_pkt} pkt_loss: {d_uprx_pkts_lost:}{d_uprx_pkt_lost} qlt: {d_uprx_qlt}")

        return

    def rx_print_status(d_mav, d_sock, d_pkt, d_fec_r, d_pkts, d_pkt_lost, d_d_err, d_fec_r_s, d_pkt_lost_s, d_d_err_s, d_ant_data, d_channel,d_bandwidth,d_wlans_info):

        rssi_avg_max = -120
        pkts_max = 0
        for ant in ant_data:
            #d_rssi_min = ant["rssi_min"]
            d_rssi_avg = ant["rssi_avg"]
            #d_rssi_max = ant["rssi_max"]
            #d_ant_num = ant["ant_num"]
            d_ant_pkts = ant["pkts"]

            if (d_rssi_avg > rssi_avg_max) and (d_ant_pkts > 0):
                rssi_avg_max =  d_rssi_avg
            if d_ant_pkts > pkts_max:
                pkts_max = d_ant_pkts

            rssi_mlvl = 106 - abs(d_rssi_avg-16)
            d_total = 106

        if pkts_max > 0:
            quality = int(100 - (100*d_pkt_lost_s)/(pkts_max+d_pkt_lost_s))
        else:
            quality = 0

        d_freq = wifi_ch_freq(int(d_channel))

        #print(f"channel: {d_channel} ({d_freq} MHz) band_w: {d_bandwidth} pkt/s: {pkts_max} RSSI: {rssi_avg_max} dBm quality: {quality}")
        command_long = get_cmd_ln(d_mav,float(rssi_avg_max),float(quality),float(pkts_max),float(d_channel),float(d_freq))
        #print(command_long)
        command_long_msg = command_long.pack(d_mav)
        #print(mp_ip,mp_port)
        d_sock.sendto(command_long_msg, (mp_ip,mp_port))
        #print(command_long_msg)

        return
    #-------------------------------------------------
    UDP_IP = ip
    UDP_PORT = port

    #signal.signal(signal.SIGINT, signal_handler)

    msg_connect = 'wfb_mon:connect'

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock_tx = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock_tx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock_tx.bind((ip_tx, port_tx))

    ext = False
    while not ext:
        try:
            sock.bind((UDP_IP, UDP_PORT))
            ext = True
        except:
            UDP_PORT +=1

    msg_connect+=f':{UDP_IP}:{UDP_PORT}'
    if not ((UDP_IP == ip) and (UDP_PORT == port)):
        thread_heartbit = Process(target=heartbit, args=(msg_connect,sock,ip,port))
        thread_heartbit.start()

    mav = mavlink2_0.MAVLink(None,srcSystem=id_srcs,srcComponent=id_srcc)
    #print(mav)

    ant_data = []
    pkt = 0
    fec_r = 0
    pkt_lost = 0
    d_err = 0
    wlan_number = 4
    pkts_1 = 0
    zero = 0
    pkts = 0
    fec_r_s = 0
    pkt_lost_s =0
    d_err_s = 0
    channel = 36
    bandwidth = 20
    wlan_number = 4
    wlans_info = f"{wlan_number}:wlan0:wlan1:wlan2:wlan3".split(":")

    uprx_pkt=0
    uprx_pkt_lost = 0

    for i in range(wlan_number):
        ant_data.append({"ant_num": i*100,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})
        ant_data.append({"ant_num": i*100+1,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})


    print("\n")
    print("WFB-MON-MAV\n")
    print(f"ip: {ip} port: {port}\nip_tx: {ip_tx} port_tx: {port_tx}")
    print(f"mp_ip: {mp_ip} mp_port: {mp_port}\n\nchannel name: {chname}\n")
    print(f"target system_id: {id_tgs} target component_id: {id_tgc}")
    print(f"source system_id: {id_srcs} source component_id: {id_srcc}")
    #---------------------------------------------------------------------------------------------------

    while True:

        data, addr = sock.recvfrom(2048)
        line = data.decode("utf-8")
        parts = re.split(r"\s+", line)
        if parts[0] == chname:
            if parts[0][:2] == 'rx':
                if parts[2] == "ANT":
                    ant_num = int(parts[3])
                    pkts, rssi_min, rssi_avg, rssi_max = map(int, parts[4].split(":"))
                    for i in range(wlan_number*2):
                        if ant_num == ant_data[i]["ant_num"]:
                            ant_data[i]["pkts"] = pkts
                            ant_data[i]["rssi_min"] = rssi_min
                            ant_data[i]["rssi_avg"] = rssi_avg
                            ant_data[i]["rssi_max"] = rssi_max
                elif parts[2] == "PKT":
                    pkts_1, zero, pkts, fec_r_s, pkt_lost_s, d_err_s = map(int, parts[3].split(":"))
                    pkt+= pkts
                    fec_r+= fec_r_s
                    pkt_lost+= pkt_lost_s
                    d_err+= d_err_s
                    rx_print_status(mav, sock_tx, pkt, fec_r, pkts, pkt_lost, d_err, fec_r_s, pkt_lost_s, d_err_s,ant_data,channel,bandwidth,wlans_info)
                    ant_data = []
                    for i in range(wlan_number):
                        ant_data.append({"ant_num": i*100,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})
                        ant_data.append({"ant_num": i*100+1,"pkts": 0, "rssi_min": 0, "rssi_avg": 0, "rssi_max": 0})
                elif parts[1] == "INF":
                    channel = parts[2]
                    bandwidth = parts[3]
                    wlans_info = parts[4].split(":")
                    wlan_number = int(wlans_info[0])
            elif parts[0][:12] == "udp_proxy_rx":
                print(line.split())
                uprx_pkt_num, uprx_pkts, uprx_pkts_lost, uprx_qlt = map(int, parts[2].split(":"))
                uprx_pkt += uprx_pkts
                uprx_pkt_lost += uprx_pkts_lost
                uprx_print_status(uprx_pkt_num, uprx_pkts, uprx_pkts_lost, uprx_qlt,uprx_pkt, uprx_pkt_lost)
                pass

            elif parts[0] == "[err]":
                print("err: "+line)

if __name__ == '__main__':
    main()
