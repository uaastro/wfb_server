#!/usr/bin/python3
import socket
import serial
import click
import signal
import atexit
import sys

@click.command()
@click.option('--port_rx', default=14785, help='mav_router_tx port')
@click.option('--ip_rx', default='0.0.0.0', help='mav_router_tx ip')
@click.option('--uart', default='/dev/ttyS0', help='uart port def /dev/ttyS0')
@click.option('--brate', default=115200, help='uart port boudrate def 115200')

def main(port_rx,ip_rx,uart,brate):

    print ("udp_to_uart initialization...\n")

    ser_1 = None
    sock_rx = None

    def cleanup():
        try:
            if sock_rx is not None:
                sock_rx.close()
        except Exception as e:
            print(e)
        try:
            if ser_1 is not None and ser_1.is_open:
                ser_1.close()
        except Exception as e:
            print(e)

    def signal_handler(sig, frame):
        cleanup()
        sys.exit(0)

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        ser_1 = serial.Serial(uart, brate)
        print ("serial port: ", uart)
        print ("serial boudrate: ", brate)
        sock_rx = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            sock_rx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            if hasattr(socket, 'SO_REUSEPORT'):
                sock_rx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
        except Exception:
            pass
        sock_rx.bind((ip_rx, port_rx))
        print ('ip_rx: ', ip_rx)
        print ('port_rx: ', port_rx)
        while True:
            try:
                data, addr = sock_rx.recvfrom(2048)
            except OSError:
                break
            ser_1.write(data)
    except Exception as e:
        print(f"error: {e}")
    finally:
        cleanup()

if __name__ == '__main__':
    main()
