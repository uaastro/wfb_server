#!/usr/bin/python3
import socket
import struct
import math
import click
import sys
import signal
import atexit

@click.command()
@click.option('--mpkts', default=2048, help='udp max pkt size def: 2048')
@click.option('--ip_rx', default='0.0.0.0', help='ip of sorce stream def: 0.0.0.0')
@click.option('--port_rx', default=5700, help='port of source stream def: 5700')
@click.option('--ip_tx', default='127.0.0.1', help='ip of destination host def: 127.0.0.1')
@click.option('--port_tx', default=5750, help='first port of destination hosts def: 5680')
@click.option('--pkt_mtu', default=523, help='packet mtu def: 512 byte')

def main(mpkts,ip_rx,port_rx,ip_tx,port_tx,pkt_mtu):
    
    pkt_id = int(0)
    chk_nums = int(0)
    chk_num = int(0)
    
    sock = None

    def cleanup():
        try:
            if sock is not None:
                sock.close()
        except Exception as e:
            print(e)

    def signal_handler(sig, frame):
        cleanup()
        sys.exit(0)

    atexit.register(cleanup)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        if hasattr(socket, 'SO_REUSEPORT'):
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
    except Exception:
        pass
    sock.bind((ip_rx, port_rx))

    print("udp packet factory TX")
    print(f"rx: {ip_rx} : {port_rx}")
    print(f"tx: {ip_tx} : {port_tx}")
    print(f"pkt_mtu : {pkt_mtu}")

    try:
        while True:
            try:
                data, addr = sock.recvfrom(mpkts)
            except OSError:
                break
            pkt_size = len(data)
            pkt_id += 1 
            chk_nums = math.ceil(pkt_size/pkt_mtu)
            for i in range(chk_nums):
                if i < (chk_nums-1):
                    packet = struct.pack("!III"+str(pkt_mtu)+"s", pkt_id, chk_nums, i, data[i*pkt_mtu:(i+1)*pkt_mtu])
                else:
                    packet = struct.pack("!III"+str(pkt_size-i*pkt_mtu)+"s", pkt_id, chk_nums, i, data[i*pkt_mtu:pkt_size])
                sock.sendto(packet, (ip_tx, port_tx))
    finally:
        cleanup()

if __name__ == '__main__':
    main()
