#!/usr/bin/python3
import socket
import struct
import math
import click

@click.command()
@click.option('--mpkts', default=2048, help='udp max pkt size def: 2048')
@click.option('--ip_rx', default='0.0.0.0', help='ip of sorce stream def: 0.0.0.0')
@click.option('--port_rx', default=5700, help='port of source stream def: 5700')
@click.option('--ip_tx', default='127.0.0.1', help='ip of destination host def: 127.0.0.1')
@click.option('--port_tx', default=5750, help='first port of destination hosts def: 5680')
@click.option('--pkt_mtu', default=523, help='packet mtu def: 512 byte')

def main(mpkts,ip_rx,port_rx,ip_tx,port_tx,pkt_mtu):
    
    pkt_id = int(0)
    chk_nums = int(0)
    chk_num = int(0)
    
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((ip_rx, port_rx))

    print("udp packet factory TX")
    print(f"rx: {ip_rx} : {port_rx}")
    print(f"tx: {ip_tx} : {port_tx}")
    print(f"pkt_mtu : {pkt_mtu}")

    while True:
        
        data, addr = sock.recvfrom(mpkts)
        pkt_size = len(data)
        pkt_id += 1 
        chk_nums = math.ceil(pkt_size/pkt_mtu)
        i = int(0)
        #print (f"pkt_id: {pkt_id} chk_nums: {chk_nums}")
        for i in range (chk_nums):
            
            if i < (chk_nums-1):
                #print (f"i: {i} chk_start: {i*pkt_mtu} chk_end: {(i+1)*pkt_mtu}")
                #header = struct.pack("!III", pkt_id, chk_nums, chk_num)
                #packet = struct.pack(str(pkt_mtu)+"s",data[i*pkt_mtu:(i+1)*pkt_mtu])
                packet = struct.pack("!III"+str(pkt_mtu)+"s", pkt_id, chk_nums, i, data[i*pkt_mtu:(i+1)*pkt_mtu])
            else:
                #print (f"i: {i} chk_start: {i*pkt_mtu} chk_end: {pkt_size - i*pkt_mtu}")
                #header = struct.pack("!III", pkt_id, chk_nums, chk_num)
                #packet = struct.pack(str(pkt_size-i*pkt_mtu)+"s",data[i*pkt_mtu:pkt_size])
                packet = struct.pack("!III"+str(pkt_size-i*pkt_mtu)+"s", pkt_id, chk_nums, i, data[i*pkt_mtu:pkt_size])
            sock.sendto(packet, (ip_tx, port_tx))
            #print (len(header))
            #print (header)
            #print (len(packet))
            #print (packet)

if __name__ == '__main__':
    main()

